/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FunctionModelService } from "../functionModel.service";
import { FunctionModelCreateInput } from "./FunctionModelCreateInput";
import { FunctionModel } from "./FunctionModel";
import { FunctionModelFindManyArgs } from "./FunctionModelFindManyArgs";
import { FunctionModelWhereUniqueInput } from "./FunctionModelWhereUniqueInput";
import { FunctionModelUpdateInput } from "./FunctionModelUpdateInput";

export class FunctionModelControllerBase {
  constructor(protected readonly service: FunctionModelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FunctionModel })
  async createFunctionModel(
    @common.Body() data: FunctionModelCreateInput
  ): Promise<FunctionModel> {
    return await this.service.createFunctionModel({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FunctionModel] })
  @ApiNestedQuery(FunctionModelFindManyArgs)
  async functionModels(
    @common.Req() request: Request
  ): Promise<FunctionModel[]> {
    const args = plainToClass(FunctionModelFindManyArgs, request.query);
    return this.service.functionModels({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FunctionModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async functionModel(
    @common.Param() params: FunctionModelWhereUniqueInput
  ): Promise<FunctionModel | null> {
    const result = await this.service.functionModel({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FunctionModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFunctionModel(
    @common.Param() params: FunctionModelWhereUniqueInput,
    @common.Body() data: FunctionModelUpdateInput
  ): Promise<FunctionModel | null> {
    try {
      return await this.service.updateFunctionModel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FunctionModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFunctionModel(
    @common.Param() params: FunctionModelWhereUniqueInput
  ): Promise<FunctionModel | null> {
    try {
      return await this.service.deleteFunctionModel({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
