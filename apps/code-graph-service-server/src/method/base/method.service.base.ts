/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Method as PrismaMethod } from "@prisma/client";

export class MethodServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MethodCountArgs, "select">): Promise<number> {
    return this.prisma.method.count(args);
  }

  async methods<T extends Prisma.MethodFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MethodFindManyArgs>
  ): Promise<PrismaMethod[]> {
    return this.prisma.method.findMany<Prisma.MethodFindManyArgs>(args);
  }
  async method<T extends Prisma.MethodFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MethodFindUniqueArgs>
  ): Promise<PrismaMethod | null> {
    return this.prisma.method.findUnique(args);
  }
  async createMethod<T extends Prisma.MethodCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MethodCreateArgs>
  ): Promise<PrismaMethod> {
    return this.prisma.method.create<T>(args);
  }
  async updateMethod<T extends Prisma.MethodUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MethodUpdateArgs>
  ): Promise<PrismaMethod> {
    return this.prisma.method.update<T>(args);
  }
  async deleteMethod<T extends Prisma.MethodDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MethodDeleteArgs>
  ): Promise<PrismaMethod> {
    return this.prisma.method.delete(args);
  }
}
