/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MethodService } from "../method.service";
import { MethodCreateInput } from "./MethodCreateInput";
import { Method } from "./Method";
import { MethodFindManyArgs } from "./MethodFindManyArgs";
import { MethodWhereUniqueInput } from "./MethodWhereUniqueInput";
import { MethodUpdateInput } from "./MethodUpdateInput";

export class MethodControllerBase {
  constructor(protected readonly service: MethodService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Method })
  async createMethod(@common.Body() data: MethodCreateInput): Promise<Method> {
    return await this.service.createMethod({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Method] })
  @ApiNestedQuery(MethodFindManyArgs)
  async methods(@common.Req() request: Request): Promise<Method[]> {
    const args = plainToClass(MethodFindManyArgs, request.query);
    return this.service.methods({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Method })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async method(
    @common.Param() params: MethodWhereUniqueInput
  ): Promise<Method | null> {
    const result = await this.service.method({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Method })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMethod(
    @common.Param() params: MethodWhereUniqueInput,
    @common.Body() data: MethodUpdateInput
  ): Promise<Method | null> {
    try {
      return await this.service.updateMethod({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Method })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMethod(
    @common.Param() params: MethodWhereUniqueInput
  ): Promise<Method | null> {
    try {
      return await this.service.deleteMethod({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
